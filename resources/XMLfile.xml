<?xml version="1.0"?>
<doc>
    <assembly>
        <name>PerfDotNetFW</name>
    </assembly>
    <members>
        <member name="T:SilkPerformer.Formatter">
            <summary>
            Summary description for Formatter.
            </summary>
        </member>
        <member name="T:SilkPerformer.MultiColumnFile">
            <summary>
            Summary description for MultiColumnFile.
            </summary>
        </member>
        <member name="M:SilkPerformer.MultiColumnFile.FileCSVLoad(System.String,System.String)">
            <summary>
            Reads a file in CSV format (comma-separated format) into memory. After the file has been read, the whole file is accessible without further I/O
            </summary>
            <param name="sName">Specifies the path and file name of the file to read. If you specify a file name without path information, Silk Performer searches for the file in the user data directory specified in the Directories tab of the System Settings - Workbench dialog</param>
            <param name="sDelimiter">Specifies the delimiter of the columns you want to use. Usually the delimiter for CSV-formatted files is the comma (",").</param>
            <returns>True on success</returns>
        </member>
        <member name="M:SilkPerformer.MultiColumnFile.FileCSVLoadGlobal(System.String,System.String)">
            <summary>
            Reads a file in CSV format (comma-separated format) into memory. After the file has been read, the whole file is accessible without further I/O
            </summary>
            <param name="sName">Specifies the path and file name of the file to read. If you specify a file name without path information, Silk Performer searches for the file in the user data directory specified in the Directories tab of the System Settings - Workbench dialog</param>
            <param name="sDelimiter">Specifies the delimiter of the columns you want to use. Usually the delimiter for CSV-formatted files is the comma (",").</param>
            <returns>True on success</returns>
        </member>
        <member name="M:SilkPerformer.MultiColumnFile.FileFixedLoad(System.String,System.String)">
            <summary>
            Reads a file in a fixed-length ASCII format into memory
            </summary>
            <param name="sFilename">Specifies the path and file name of the file to read. If you specify a file name without path information, Silk Performer searches for the file in the user data directory specified in the Directories tab of the System Settings - Workbench dialog</param>
            <param name="sFormat">Specifies the format of a row in the file. For each column in one row you specify the starting position and the ending position of the column (beginning with 1 as the first position in the row). You need not to specify all columns in a row, and you can specify columns that overlap with other columns.Syntax of the format string: Format = Startpos ".." Endpos { ";" Startpos ".." Endpos }.</param>
            <returns>True on success</returns>
        </member>
        <member name="M:SilkPerformer.MultiColumnFile.FileFixedLoadGlobal(System.String,System.String)">
            <summary>
            Reads a file in a fixed-length ASCII format into memory
            </summary>
            <param name="sFilename">Specifies the path and file name of the file to read. If you specify a file name without path information, Silk Performer searches for the file in the user data directory specified in the Directories tab of the System Settings - Workbench dialog</param>
            <param name="sFormat">Specifies the format of a row in the file. For each column in one row you specify the starting position and the ending position of the column (beginning with 1 as the first position in the row). You need not to specify all columns in a row, and you can specify columns that overlap with other columns.Syntax of the format string: Format = Startpos ".." Endpos { ";" Startpos ".." Endpos }.</param>
            <returns>True on success</returns>
        </member>
        <member name="M:SilkPerformer.MultiColumnFile.FileGetCol(System.Int32)">
            <summary>
            Retrieves the value of the column specified by nColumn of the current row
            </summary>
            <param name="nColumnIx">Number of the column beginning with 1 for the first column. If you set nColumn to 0, the whole row is retrieved</param>
            <returns></returns>
        </member>
        <member name="M:SilkPerformer.MultiColumnFile.FileGetFirstRow">
            <summary>
            Sets the current row pointer to the first row in the file
            </summary>
            <returns>True on success</returns>
        </member>
        <member name="M:SilkPerformer.MultiColumnFile.FileGetNextRow">
            <summary>
            Sets the row pointer to the row after the current row
            </summary>
            <returns>row number for the current row (beginning with 1 for the first row of a file)</returns>
        </member>
        <member name="M:SilkPerformer.MultiColumnFile.FileGetNumRows">
            <summary>
            Returns the number of rows of a file previously opened and read with a FileLoad function
            </summary>
            <returns>number of rows in the file</returns>
        </member>
        <member name="M:SilkPerformer.MultiColumnFile.FileGetRndRow">
            <summary>
            Sets the row pointer to a randomly selected row within a file
            </summary>
            <returns>row number of the current row (beginning with 1 for the first row of a file)</returns>
        </member>
        <member name="M:SilkPerformer.MultiColumnFile.FileGetRow(System.Int32)">
            <summary>
            Sets the current row pointer to the row number specified.
            </summary>
            <param name="nRowIx">Row number to be set</param>
            <returns>Row number of the current row (beginning with 1 for the first row of a file). If an invalid row number is specified, this function returns 0 and does not modify the row pointer</returns>
        </member>
        <member name="M:SilkPerformer.MultiColumnFile.FileUnload">
            <summary>
            Closes a file handle previously opened with a FileLoad function
            </summary>
            <returns></returns>
        </member>
        <member name="M:SilkPerformer.MultiColumnFile.IsValid">
            <summary>
            Returns true if a valid file has been opened
            </summary>
            <returns></returns>
        </member>
        <member name="T:SilkPerformer.RandomGenerator">
            <summary>
            Summary description for Class1.
            </summary>
        </member>
        <member name="T:SilkPerformer.Bdl">
            <summary>
            This class exposes the main functions of the Silk Performer BDL (Benchmark Description Language)
            The methods of the class are all static.
            </summary>
        </member>
        <member name="F:SilkPerformer.Bdl.DEFAULT_STRING_LEN">
            <summary>
            This is the default length of string buffers that are used internally to pass strings between .NET and theSilk Performer Runtime
            If you call Bdl functions that return strings that are longer than 1024 (default) than you should increase this static value
            </summary>
        </member>
        <member name="F:SilkPerformer.Bdl.DEFAULT_SEVERITY">
            <summary>
            This is the default severity if you call a method override that doesn't take a severity
            </summary>
        </member>
        <member name="M:SilkPerformer.Bdl.AttributeSet(System.String,System.String)">
            <summary>
            Assigns a string to a specified attribute of the user. The function automatically creates the attribute if it does not exist
            </summary>
            <param name="sName">Name of the attribute whose value is set. The function automatically creates the attribute if it does not exist</param>
            <param name="sValue">String that is assigned to the specified attribute</param>
        </member>
        <member name="M:SilkPerformer.Bdl.AttributeSetInt(System.String,System.Int32)">
            <summary>
            Assigns a number to a specified attribute of the user. The function automatically creates the attribute if it does not exist
            </summary>
            <param name="sName">Name of the attribute whose value is set. The function automatically creates the attribute if it does not exist</param>
            <param name="sValue">Number that is assigned to the specified attribute</param>
        </member>
        <member name="M:SilkPerformer.Bdl.AttributeSetDouble(System.String,System.Double)">
            <summary>
            Assigns a double to a specified attribute of the user. The function automatically creates the attribute if it does not exist
            </summary>
            <param name="sName">Name of the attribute whose value is set. The function automatically creates the attribute if it does not exist</param>
            <param name="sValue">Double that is assigned to the specified attribute</param>
        </member>
        <member name="M:SilkPerformer.Bdl.AttributeSetBoolean(System.String,System.Boolean)">
            <summary>
            Assigns a boolean to a specified attribute of the user. The function automatically creates the attribute if it does not exist
            </summary>
            <param name="sName">Name of the attribute whose value is set. The function automatically creates the attribute if it does not exist</param>
            <param name="sValue">Boolean that is assigned to the specified attribute</param>
        </member>
        <member name="M:SilkPerformer.Bdl.AttributeGet(System.String)">
            <summary>
            Obsolete: Retrieves a string value from a specified attribute of the user
            Use AttributeGetString instead
            </summary>
            <param name="sName">Name of the attribute whose value is retrieved. The name of the attribute is case sensitive</param>
            <returns>Value of the attribute</returns>
        </member>
        <member name="M:SilkPerformer.Bdl.AttributeGetString(System.String)">
            <summary>
            Retrieves a string value from a specified attribute of the user
            </summary>
            <param name="sName">Name of the attribute whose value is retrieved. The name of the attribute is case sensitive</param>
            <returns>Value of the attribute</returns>
        </member>
        <member name="M:SilkPerformer.Bdl.AttributeGetInt(System.String)">
            <summary>
            Retrieves an integer value from a specified attribute of the user
            </summary>
            <param name="sName">Name of the attribute whose value is retrieved. The name of the attribute is case sensitive</param>
            <returns>Value of the attribute</returns>
        </member>
        <member name="M:SilkPerformer.Bdl.AttributeGetDouble(System.String)">
            <summary>
            Retrieves a double value from a specified attribute of the user
            </summary>
            <param name="sName">Name of the attribute whose value is retrieved. The name of the attribute is case sensitive</param>
            <returns>Value of the attribute</returns>
        </member>
        <member name="M:SilkPerformer.Bdl.AttributeGetBoolean(System.String)">
            <summary>
            Retrieves a boolean value from a specified attribute of the user
            </summary>
            <param name="sName">Name of the attribute whose value is retrieved. The name of the attribute is case sensitive</param>
            <returns>Value of the attribute</returns>
        </member>
        <member name="M:SilkPerformer.Bdl.AttributeGetDateTime(System.String)">
            <summary>
            Retrieves a datetime value from a specified string attribute of the user
            </summary>
            <param name="sName">Name of the attribute whose value is retrieved. The name of the attribute is case sensitive</param>
            <returns>Value of the attribute</returns>
        </member>
        <member name="M:SilkPerformer.Bdl.MeasureStart(System.String)">
            <summary>
            Starts a custom time measure in a transaction or a function with a specified measure name
            </summary>
            <param name="sMeasure">Measure name used to identify the measure when calling additional measure functions and when analyzing the results written to both the results repository and individual result files</param>
            <returns>true if successful</returns>
        </member>
        <member name="M:SilkPerformer.Bdl.MeasurePause(System.String)">
            <summary>
            Pauses a custom time measure until the MeasureResume function is called, and returns the current value of the time measure
            </summary>
            <param name="sMeasure">Measure name identifying the custom time measure to pause</param>
            <returns>Current value of the custom time measure in 1/1000 secs</returns>
        </member>
        <member name="M:SilkPerformer.Bdl.MeasureResume(System.String)">
            <summary>
            Restarts a custom time measure that was paused with the MeasurePause function. The time will be added to the time measured before the MeasurePause function was called
            </summary>
            <param name="sMeasure">Current value of the custom time measure in 1/1000 secs</param>
            <returns>Measure name identifying the custom time measure to resume</returns>
        </member>
        <member name="M:SilkPerformer.Bdl.MeasureStop(System.String)">
            <summary>
            Stops a custom time measure started with the MeasureStart function and returns the value of the time measure
            </summary>
            <param name="sMeasure">Measure name identifying the custom time measure to stop</param>
            <returns>Final value of the custom time measure in 1/1000 secs</returns>
        </member>
        <member name="M:SilkPerformer.Bdl.MeasureIncFloat(System.String,System.Double,System.String,SilkPerformer.Bdl.MeasureUsage)">
            <summary>
            Increments the value of a custom counter by a floating-point value. When this function is called for a specified custom counter for the first time, the counter is automatically allocated and initialized. You do not need to call any other measure functions when using a Silk Performer measure for counting purposes
            </summary>
            <param name="sMeasure">Measure name identifying the custom counter to increment</param>
            <param name="fValue">Increment value. This parameter may be negative or zero</param>
            <param name="sUnit">String that specifies the measurement unit (optional). The length of this string is limited to 19 characters.</param>
            <param name="nUsage">Defines the way in which the Performance Explorer displays the counter by default</param>
            <returns>The value of the custom counter after the increment operation</returns>
        </member>
        <member name="M:SilkPerformer.Bdl.MeasureGet(System.String,SilkPerformer.Bdl.MeasureClass,SilkPerformer.Bdl.MeasureKind,System.Double@,System.Boolean)">
            <summary>
            Retrieves a specific Silk Performer measure value, for example, the maximum, the minimum or the average value of a specified measure performed during the simulation, or the standard deviation of the collected measure values
            </summary>
            <param name="sMeasure">Name of the object concerned with the measurement</param>
            <param name="nClass">Specifies the type of measure to retrieve
            To retrieve the value of a custom time measure, pass the MEASURE_TIMER_RESPONSETIME parameter to the function.
            To retrieve the value of a custom counter, pass the MEASURE_COUNTER_CUSTOMCOUNTER parameter to the function.
            To retrieve the value of an average counter, pass the MEASURE_COUNTER_AVERAGE parameter to the function.
            </param>
            <param name="nKind">Specifies the type of measure value to retrieve</param>
            <param name="fTime">Variable receiving the measure value</param>
            <param name="bAll">Specifies the time interval used for measurement value calculation</param>
            <returns>true if successful</returns>
        </member>
        <member name="M:SilkPerformer.Bdl.MeasureSetBound(System.String,SilkPerformer.Bdl.MeasureClass,System.Int32,System.Double,SilkPerformer.Bdl.Severity)">
            <summary>
            Determines the bound value for a specified time measure or the default bound value for a specified time measure type. Result reports list the percentage of all time measure values within the time bound specified. A time bound is commonly set to the amount of time that represents the goal for the completion of, for example, the transaction being tested. An optional severity level value may be specified for a bound exceeding message, which is reported whenever this bound is exceeded by a value.
            This function can be used before a measure is created and/or used
            </summary>
            <param name="sMeasure">Measure name identifying the measure. If this parameter is set to NULL or "" the default bound is set for the provided measure type</param>
            <param name="nClass">Measure class or measure type</param>
            <param name="nBound">Number of the measure bound specified through the fValue parameter.
            If this parameter is set to 1, measure bound 1 will be set to fValue. Otherwise, if this parameter is set to 2, measure bound 2 will be set to fValue</param>
            <param name="fValue">Bound value for the specified measure</param>
            <param name="nSeverity">An error with the specified severity level is raised, if this measure bound is being exceeded during a load test</param>
            <returns>true if successful</returns>
        </member>
        <member name="M:SilkPerformer.Bdl.MeasureTimeseries(SilkPerformer.Bdl.MeasureClass,System.Boolean)">
            <summary>
            Determines whether to generate time series data for a specified Silk Performer measurement. If time series data generation is enabled, data will be written to the corresponding file (.tsd) and can be analyzed with Silk Performer's Performance Explorer
            </summary>
            <param name="nType">Specifies the type of measurement for which to generate time series data</param>
            <param name="bTimeseries">If this parameter is set to true, Silk Performer generates time series data for the specified measure type</param>
            <returns>true if successful</returns>
        </member>
        <member name="M:SilkPerformer.Bdl.MeasureOnOff(System.Int32)">
            <summary>
            Switches Measures On/Off
            </summary>
            <param name="nStatus"></param>
            <returns></returns>
        </member>
        <member name="M:SilkPerformer.Bdl.MeasureInc(System.String)">
            <summary>
            Increments the value of a custom counter. When this function is called for a specified custom counter for the first time, the counter is automatically allocated and initialized. You do not need to call any other measure functions when using a Silk Performer measure for counting purposes
            </summary>
            <param name="sMeasure">Measure name identifying the custom counter to increment</param>
            <returns>The value of the custom counter after the increment operation</returns>
        </member>
        <member name="M:SilkPerformer.Bdl.MeasureInc(System.String,System.Int32,SilkPerformer.Bdl.MeasureKind)">
            <summary>
            Increments the value of a custom counter. When this function is called for a specified custom counter for the first time, the counter is automatically allocated and initialized. You do not need to call any other measure functions when using a Silk Performer measure for counting purposes
            </summary>
            <param name="sMeasure">Measure name identifying the custom counter to increment</param>
            <param name="nInc">Increment value. This parameter must not be negative or zero</param>
            <param name="nType">Specifies the type of the custom counter. Pass the MEASURE_KIND_AVERAGE flag to the function to calculate the average value instead of the sum. In this case, treat the custom counter as an average counter when you retrieve its value with the MeasureGet function</param>
            <returns>The value of the custom counter after the increment operation</returns>
        </member>
        <member name="M:SilkPerformer.Bdl.MeasureIncFloat(System.String,System.Double)">
            <summary>
            Increments the value of a custom counter. When this function is called for a specified custom counter for the first time, the counter is automatically allocated and initialized. You do not need to call any other measure functions when using a Silk Performer measure for counting purposes
            </summary>
            <param name="sName">Measure name identifying the custom counter to increment</param>
            <param name="dInc">Increment value. This parameter must not be negative or zero</param>
            <returns>The value of the custom counter after the increment operation</returns>
        </member>
        <member name="M:SilkPerformer.Bdl.MeasureGet(System.String,SilkPerformer.Bdl.MeasureClass,SilkPerformer.Bdl.MeasureKind,System.Boolean)">
            <summary>
            Retrieves a specific Silk Performer measure value, for example, the maximum, the minimum or the average value of a specified measure performed during the simulation, or the standard deviation of the collected measure values
            </summary>
            <param name="sMeasure">Name of the object concerned with the measurement</param>
            <param name="nClass">Specifies the type of measure to retrieve
            To retrieve the value of a custom time measure, pass the MEASURE_TIMER_RESPONSETIME parameter to the function.
            To retrieve the value of a custom counter, pass the MEASURE_COUNTER_CUSTOMCOUNTER parameter to the function.
            To retrieve the value of an average counter, pass the MEASURE_COUNTER_AVERAGE parameter to the function.
            </param>
            <param name="nKind">Specifies the type of measure value to retrieve</param>
            <param name="bAll">Specifies the time interval used for measurement value calculation</param>
            <returns>Measure value</returns>
        </member>
        <member name="M:SilkPerformer.Bdl.MeasureGet(System.String,SilkPerformer.Bdl.MeasureClass,SilkPerformer.Bdl.MeasureKind)">
            <summary>
            Retrieves a specific Silk Performer measure value, for example, the maximum, the minimum or the average value of a specified measure performed during the simulation, or the standard deviation of the collected measure values
            </summary>
            <param name="sMeasure">Name of the object concerned with the measurement</param>
            <param name="nClass">Specifies the type of measure to retrieve
            To retrieve the value of a custom time measure, pass the MEASURE_TIMER_RESPONSETIME parameter to the function.
            To retrieve the value of a custom counter, pass the MEASURE_COUNTER_CUSTOMCOUNTER parameter to the function.
            To retrieve the value of an average counter, pass the MEASURE_COUNTER_AVERAGE parameter to the function.
            </param>
            <param name="nKind">Specifies the type of measure value to retrieve</param>
            <returns>Measure value</returns>
        </member>
        <member name="M:SilkPerformer.Bdl.Checkpoint(System.String,System.String,System.Boolean)">
            <summary>
            Creates a checkpoint (see BDL reference documentation for more details).
            </summary>
            <param name="sCheckpointName">The name of the checkpoint. Has to be unique across the whole load test.</param>
            <param name="sMessage">An additional message which will be displayed in the output/log line of the checkpoint.</param>
            <param name="bUseTimer">
            If <c>true</c> a time measure with the checkpoint's name will be created.
            The time measure starts after the preceding checkpoint or at the begin of the transaction if there's no preceding checkpoint.
            </param>
            <returns><c>true</c> if the call was successful. <c>false</c> otherwise.</returns>
        </member>
        <member name="M:SilkPerformer.Bdl.GetDataFilePathEx2Int(System.String,System.Text.StringBuilder,System.Int32)">
            <summary>
            Retrieves the name of the current user. The user name returned consists of the name of the user group defined in the workload section of the script concatenated with a serial number indicating the number of the user within the user group, with the two joined by an underscore character
            </summary>
            <returns>The name of the current user</returns>
        </member>
        <member name="M:SilkPerformer.Bdl.GetDataFilePathEx2(System.String)">
            <summary>
            The method returns the absolute path to a file in the data files section during the loadtest. As there are different locations for the data files depending on where the loadtest is executed (localhost, agent) this function always returns the absolute path to a data file.
            </summary>
            <param name="sFilename">Name of the data file of which the absolute path should be returned</param>
            <returns>Absolute path of the file</returns>
        </member>
        <member name="M:SilkPerformer.Bdl.GetUser">
            <summary>
            Retrieves the name of the current user. The user name returned consists of the name of the user group defined in the workload section of the script concatenated with a serial number indicating the number of the user within the user group, with the two joined by an underscore character
            </summary>
            <returns>The name of the current user</returns>
        </member>
        <member name="M:SilkPerformer.Bdl.GetUserId">
            <summary>
            Retrieves a unique ID (number) per virtual user within a loadtest. The ID is 1 for the first virtual user, 2 for the second and n for the n'th virtual user
            </summary>
            <returns>The unique identification number of the user</returns>
        </member>
        <member name="M:SilkPerformer.Bdl.GetUserIdOnAgent">
            <summary>
            Retrieves a unique ID (number) per current virtual user on an agent (machine). The ID is 1 for the first virtual user, 2 for the second and n for the n'th virtual user. The number is unique per agent, but not across agents
            </summary>
            <returns>The unique identification number of the user</returns>
        </member>
        <member name="M:SilkPerformer.Bdl.GetUsergroup">
            <summary>
            Retrieves the name of the user group to which the current virtual user belongs
            </summary>
            <returns>The name of the user group</returns>
        </member>
        <member name="M:SilkPerformer.Bdl.GetProfile">
            <summary>
            Retrieves the name of the settings profile that the current virtual user uses
            </summary>
            <returns>The name of the profile</returns>
        </member>
        <member name="M:SilkPerformer.Bdl.GetAgentId">
            <summary>
            Retrieves a unique id for the agent running the benchmark
            </summary>
            <returns>Unique identification number for the agent running the benchmark. The ID is 0 for the first agent, 1 for the second agent, and n-1 for the n th agent</returns>
        </member>
        <member name="M:SilkPerformer.Bdl.GetRuntimes">
            <summary>
            Retrieves the number of virutal users scheduled for the whole load test. The number is not decreased when a virtual user is stopped or finished
            </summary>
            <returns>The number of virutal users scheduled for the whole load test</returns>
        </member>
        <member name="M:SilkPerformer.Bdl.GetAgent">
            <summary>
            Retrieves the agent name. The agent name is the name of the agent computer where the simulation for the current user has been started
            </summary>
            <returns>The name of the agent</returns>
        </member>
        <member name="M:SilkPerformer.Bdl.GetController">
            <summary>
            Retrieves the controller name for the current simulation. The controller name is the name of the controller computer from which all agents were started
            </summary>
            <returns>The name of the controller</returns>
        </member>
        <member name="M:SilkPerformer.Bdl.GetProject">
            <summary>
            Retrieves the name of the current load-testing project
            </summary>
            <returns>The name of the project</returns>
        </member>
        <member name="M:SilkPerformer.Bdl.GetLoadtest">
            <summary>
            Retrieves the number of the load test generated for the current simulation. All results in the repository of the current load test are associated to this load test ID number
            </summary>
            <returns>The number of the load test</returns>
        </member>
        <member name="M:SilkPerformer.Bdl.GetMemUsageEx">
            <summary>
            Gets the current memory usage
            </summary>
        </member>
        <member name="M:SilkPerformer.Bdl.GetBdfFileName">
            <summary>
            Gets the name of the bdf file
            </summary>
        </member>
        <member name="M:SilkPerformer.Bdl.GetBuildNo">
            <summary>
            Gets the current build no
            </summary>
        </member>
        <member name="M:SilkPerformer.Bdl.PrintEx(System.String,SilkPerformer.Bdl.PrintDisplay,SilkPerformer.Bdl.PrintColor)">
            <summary>
            Prints a message to the run-time details part of the Monitor window
            </summary>
            <param name="sMsg">Message to be printed</param>
            <param name="nDisplay">Specifies at which Monitor window settings the message is displayed </param>
            <param name="nColor">Color used to print the message</param>
        </member>
        <member name="M:SilkPerformer.Bdl.Print(System.String)">
            <summary>
            Prints a message to the run-time details part of the Monitor window
            </summary>
            <param name="sMsg">Message to be printed</param>
        </member>
        <member name="M:SilkPerformer.Bdl.Print(System.String,SilkPerformer.Bdl.PrintDisplay,SilkPerformer.Bdl.PrintColor)">
            <summary>
            Prints a message to the run-time details part of the Monitor window
            </summary>
            <param name="sMsg">Message to be printed</param>
            <param name="nDisplay">Specifies at which Monitor window settings the message is displayed </param>
            <param name="nColor">Color used to print the message</param>
        </member>
        <member name="M:SilkPerformer.Bdl.RepMessage(System.String,SilkPerformer.Bdl.Severity)">
            <summary>
            Writes a message to the repository (if enabled).
            The message in the sMessage parameter also gets written to the following files:
            .ERR file
            .LOG file
            .RPT file (as of Silk Performer )
            The message will be counted as an error if SEVERITY_ERROR is the selected severity
            </summary>
            <param name="sMessage">Message that will be written to the repository</param>
            <param name="nSeverity">Severity of the event due to which a message is written to the repository</param>
        </member>
        <member name="M:SilkPerformer.Bdl.RepMessage(System.String)">
            <summary>
            Writes a message to the repository (if enabled).
            The message in the sMessage parameter also gets written to the following files:
            .ERR file
            .LOG file
            .RPT file (as of Silk Performer )
            The message will be counted as an error if SEVERITY_ERROR is the selected severity
            </summary>
            <param name="sMessage">Message that will be written to the repository</param>
        </member>
        <member name="M:SilkPerformer.Bdl.RedirectConsole">
            <summary>
            Redirects the Console.Out to the .wrt file
            Redirects the Console.Error to the .err file
            </summary>
        </member>
        <member name="M:SilkPerformer.Bdl.WriteErr(System.String)">
            <summary>
            Writes to the .err file of the current virtual user.
            Note: Error files (.err) are written only if the Virtual user report on error files (.rpt) option is enabled in the General tab of the Profile Settings - Results dialog.
            </summary>
            <param name="sErrMsg">String containing the message to write to the .err file</param>
        </member>
        <member name="M:SilkPerformer.Bdl.WriteLog(System.String)">
            <summary>
            Writes to the .log file of the current user.
            Note: Log files (.log) are written only if the generation of these files is enabled in the General tab of the Profile Settings - Results dialog
            </summary>
            <param name="sLogMsg">String containing the message to write to the .log file</param>
        </member>
        <member name="M:SilkPerformer.Bdl.WriteData(System.String,SilkPerformer.Bdl.WriteDataOption)">
            <summary>
            Writes a specified number of bytes to a new line of the Output file (.wrt) of the virtual user. This function can be used to write binary data in a readable notation.
            Note: Output files (.wrt) are generated only if the generation of these files is enabled in the General tab of the Profile Settings - Results dialog
            </summary>
            <param name="sDataMsg">String containing the data to write to the Output file</param>
            <param name="nOption">Specifies the format used for writing </param>
        </member>
        <member name="M:SilkPerformer.Bdl.WriteWrtEx(System.String)">
            <summary>
            Writes a specified number of bytes to a new line of the Output file (.wrt) of the virtual user. This function can be used to write binary data in a readable notation.
            Note: Output files (.wrt) are generated only if the generation of these files is enabled in the General tab of the Profile Settings - Results dialog
            </summary>
            <param name="sWrtMsg">String buffer containing the data to write to the Output file</param>
        </member>
        <member name="M:SilkPerformer.Bdl.ThinkTimeInt(System.Double,SilkPerformer.Bdl.ThinkTimeOption,System.UInt32)">
            <summary>
            Simulates thinking periods produced by the user of a transaction (for example, the time for entering input data). This function affects the simulation only if the stress test option is not selected
            </summary>
            <param name="fTime">Time interval the simulated user must wait (in seconds)</param>
            <param name="nRandom">Specifies whether to generate random values for the think time periods</param>
            <returns>Actual thinking time </returns>
        </member>
        <member name="M:SilkPerformer.Bdl.ThinkTime(System.Double,SilkPerformer.Bdl.ThinkTimeOption)">
            <summary>
            Simulates thinking periods produced by the user of a transaction (for example, the time for entering input data). This function affects the simulation only if the stress test option is not selected
            </summary>
            <param name="fTime">Time interval the simulated user must wait (in seconds)</param>
            <param name="nRandom">Specifies whether to generate random values for the think time periods</param>
            <returns>Actual thinking time </returns>
        </member>
        <member name="M:SilkPerformer.Bdl.ThinkTime(System.Double)">
            <summary>
            Simulates thinking periods produced by the user of a transaction (for example, the time for entering input data). This function affects the simulation only if the stress test option is not selected
            </summary>
            <param name="fTime">Time interval the simulated user must wait (in seconds)</param>
            <returns>Actual thinking time </returns>
        </member>
        <member name="M:SilkPerformer.Bdl.WaitFor(System.String,System.Int32,System.Int32)">
            <summary>
            Waits for a number of users that call this function. It only synchronizes virtual users on one agent
            </summary>
            <param name="sName">Name of the synchronization point</param>
            <param name="nCount">Number of users to wait for</param>
            <param name="nTimeout">Timeout of wait period in seconds</param>
            <returns>true if successful</returns>
        </member>
        <member name="M:SilkPerformer.Bdl.GlobalWaitFor(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Defines a checkpoint (rendezvous point) and blocks the calling user. The caller waits until a specified number of users (himself inclusive) have reached or passed the checkpoint, or until the specified timeout occurs. The checkpoint is identified by name and is visible for all users including those running on various remote agents.
            A waiting user continues when the specified timeout is reached or the given number of users have called the function for a checkpoint. A user who was timed out has passed the checkpoint and is also regarded as a user who has passed this checkpoint
            </summary>
            <param name="sName">Name to identify the checkpoint</param>
            <param name="nCount">Number of users who must reach or pass the checkpoint. To specify to wait for all users pass 0</param>
            <param name="nTimeout">Maximum waiting time in seconds before a timeout occurs. 0 means INFINITE</param>
            <returns>
            GLOBAL_ERROR if an error like an invalid number of users at the checkpoint occurred. To get more information, call the GetLastError function. 
            GLOBAL_CANCELED if the waiting period was cancelled by the controller computer. 
            GLOBAL_TIMEOUT if the user was tired of waiting for others and continues the simulation now. 
            GLOBAL_PASSED if all users have reached the checkpoint the user was waiting for and the user continues the simulation now. 
            GLOBAL_SYNCHRONIZED if all users have reached the checkpoint the user was waiting for. The user was the last one to enter the checkpoint and continues the simulation now. 
            </returns>
        </member>
        <member name="M:SilkPerformer.Bdl.GlobalWaitFor(System.String)">
            <summary>
            Defines a checkpoint (rendezvous point) and blocks the calling user. The caller waits until a specified number of users (himself inclusive) have reached or passed the checkpoint, or until the specified timeout occurs. The checkpoint is identified by name and is visible for all users including those running on various remote agents.
            A waiting user continues when the specified timeout is reached or the given number of users have called the function for a checkpoint. A user who was timed out has passed the checkpoint and is also regarded as a user who has passed this checkpoint
            </summary>
            <param name="sName">Name to identify the checkpoint</param>
            <returns>
            GLOBAL_ERROR if an error like an invalid number of users at the checkpoint occurred. To get more information, call the GetLastError function. 
            GLOBAL_CANCELED if the waiting period was cancelled by the controller computer. 
            GLOBAL_TIMEOUT if the user was tired of waiting for others and continues the simulation now. 
            GLOBAL_PASSED if all users have reached the checkpoint the user was waiting for and the user continues the simulation now. 
            GLOBAL_SYNCHRONIZED if all users have reached the checkpoint the user was waiting for. The user was the last one to enter the checkpoint and continues the simulation now. 
            </returns>
        </member>
        <member name="M:SilkPerformer.Bdl.GlobalResourceEnter(System.String,System.Int32,System.Int32)">
            <summary>
            Defines a resource that can be occupied by only a limited number of users. The caller has to wait until the number of users who occupy the resource is less than the maximum number of users who are allowed to occupy the resource. To releases a resource, call the GlobalResourceRelease function
            </summary>
            <param name="sName">Name to identify a resource</param>
            <param name="nCount">Number of users who are allowed to enter the resource (optional). If this parameter is omitted, only one user is allowed to enter the resource</param>
            <param name="nTimeout">Maximum waiting time in seconds before a timeout occurs (optional). If this parameter is omitted, the timeout is set to INFINITE</param>
            <returns>GLOBAL_ERROR if an error like an invalid number of users for the resource occurred. To get more information, call the GetLastError function.
            GLOBAL_CANCELED if the waiting period was cancelled by the controller. 
            GLOBAL_TIMEOUT if the user was tired of waiting for others and continues the simulation now. 
            GLOBAL_PASSED if the user has occupied the resource and continues the simulation now
            </returns>
        </member>
        <member name="M:SilkPerformer.Bdl.GlobalResourceEnter(System.String)">
            <summary>
            Defines a resource that can be occupied by only a limited number of users. The caller has to wait until the number of users who occupy the resource is less than the maximum number of users who are allowed to occupy the resource. To releases a resource, call the GlobalResourceRelease function
            </summary>
            <param name="sName">Name to identify a resource</param>
            <returns>GLOBAL_ERROR if an error like an invalid number of users for the resource occurred. To get more information, call the GetLastError function.
            GLOBAL_CANCELED if the waiting period was cancelled by the controller. 
            GLOBAL_TIMEOUT if the user was tired of waiting for others and continues the simulation now. 
            GLOBAL_PASSED if the user has occupied the resource and continues the simulation now
            </returns>
        </member>
        <member name="M:SilkPerformer.Bdl.GlobalResourceRelease(System.String)">
            <summary>
            Releases a resource that was occupied with the GlobalResourceEnter function. If there are any users waiting for the resource, the next user in the queue resumes the simulation
            </summary>
            <param name="sName">Name that identifies a resource</param>
        </member>
        <member name="M:SilkPerformer.Bdl.GlobalVarGet(System.String,System.Int32@,System.Int32)">
            <summary>
            Gets the value of a global integer variable. Global variables are accessible for all users on all agents.
            </summary>
            <param name="sVariable">Name of the global variable whose value is to be retrieved</param>
            <param name="nValue">Variable receiving the value of the global variable</param>
            <param name="nTimeout">Timeout for getting the value. 0 means wait till operation finished. If the specified time period is exceeded, Silk Performer indicates an error</param>
            <returns>true if successful</returns>
        </member>
        <member name="M:SilkPerformer.Bdl.GlobalVarGet(System.String,System.Int32@)">
            <summary>
            Gets the value of a global integer variable. Global variables are accessible for all users on all agents.
            </summary>
            <param name="sVariable">Name of the global variable whose value is to be retrieved</param>
            <param name="nValue">Variable receiving the value of the global variable</param>
            <returns>true if successful</returns>
        </member>
        <member name="M:SilkPerformer.Bdl.GlobalVarSet(System.String,System.Int32,System.Int32)">
            <summary>
            Sets the value of a global integer variable. Global variables are accessible for all users running on all agents
            </summary>
            <param name="sVariable">Name of the global variable whose value is to be set</param>
            <param name="nValue">Value that is assigned to the global variable</param>
            <param name="nTimeout">Timeout for setting the value. 0 means wait till operation finished. If the specified time period is exceeded, Silk Performer indicates an error</param>
            <returns>true if successful</returns>
        </member>
        <member name="M:SilkPerformer.Bdl.GlobalVarSet(System.String,System.Int32)">
            <summary>
            Sets the value of a global integer variable. Global variables are accessible for all users running on all agents
            </summary>
            <param name="sVariable">Name of the global variable whose value is to be set</param>
            <param name="nValue">Value that is assigned to the global variable</param>
            <returns>true if successful</returns>
        </member>
        <member name="M:SilkPerformer.Bdl.GlobalVarInc(System.String,System.Int32,System.Int32@,System.Int32)">
            <summary>
            Increments the value of a global integer variable. Global variables are accessible for all users on all agents.
            Note You do not need to initialize a global variable before you increment it for the first time. This is done automatically, in the course of which the value of the variable is set to 0
            </summary>
            <param name="sVariable">Name of the global variable whose value is to be incremented</param>
            <param name="nInc">Number that is added to the value of the specified global variable</param>
            <param name="nValue">Variable receiving the value of the global variable after the increment operation</param>
            <param name="nTimeout">Timeout for setting the value. 0 means wait till operation finished. If the specified time period is exceeded, Silk Performer indicates an error</param>
            <returns>true if successful</returns>
        </member>
        <member name="M:SilkPerformer.Bdl.GlobalVarInc(System.String,System.Int32,System.Int32@)">
            <summary>
            Increments the value of a global integer variable. Global variables are accessible for all users on all agents.
            Note You do not need to initialize a global variable before you increment it for the first time. This is done automatically, in the course of which the value of the variable is set to 0
            </summary>
            <param name="sVariable">Name of the global variable whose value is to be incremented</param>
            <param name="nInc">Number that is added to the value of the specified global variable</param>
            <param name="nValue">Variable receiving the value of the global variable after the increment operation</param>
            <returns>true if successful</returns>
        </member>
        <member name="M:SilkPerformer.Bdl.IncDate(System.Int32,System.Int32)">
            <summary>
            Adds a certain number of days to a date
            </summary>
            <param name="nDate">Input date with format YYYYMMDD</param>
            <param name="nDays">Number of added days</param>
            <example lang="C#">int nDate = IncDate(19981012, 30);</example>
        </member>
        <member name="M:SilkPerformer.Bdl.FormatDateTime(System.Int32,System.Int32,System.String,System.String@)">
            <summary>
            Converts date and time into the specified format
            </summary>
            <param name="nDate">Input date with format YYYYMMDD</param>
            <param name="nTime">Input time</param>
            <param name="sFormat">Format control string. See FormatDate function for a description of all format control strings</param>
            <param name="sDate">Formatted date string</param>
            <returns>formatted date string</returns>
            <example lang="C#">string sDateTime;
            FormatDateTime(19961015, 110, "%Y-%m-%d %H:%M:%S", sDateTime);</example>
        </member>
        <member name="M:SilkPerformer.Bdl.GetCurrentDate">
            <summary>
            Returns the current date in a YYYYMMDD format
            </summary>
            <returns>number in YYYYMMDD format</returns>
        </member>
        <member name="M:SilkPerformer.Bdl.GetCurrentTime">
            <summary>
            Returns the time of the current day in seconds
            </summary>
            <returns>current time in seconds</returns>
        </member>
        <member name="M:SilkPerformer.Bdl.RndUniN(System.Int32,System.Int32)">
            <summary>
            Generates a ranomd number in the defined range
            </summary>
            <param name="nFrom">Minimum number</param>
            <param name="nTo">Maximum number</param>
            <returns>Random number</returns>
        </member>
        <member name="M:SilkPerformer.Bdl.RndDate(System.Int32,System.Int32)">
            <summary>
            Adds a random number of days between 0 and nDays to a date. The random values generated are distributed uniformly
            </summary>
            <param name="nDate">Input date with format YYYYMMDD</param>
            <param name="nDays">Upper boundary of random interval for days to add</param>
            <returns>increased date</returns>
        </member>
        <member name="M:SilkPerformer.Bdl.RndFormatDate(System.Int32,System.Int32,System.String)">
            <summary>
            Adds a random number of days between 0 and nDays to a date and formats this date into the specified format. The random values generated are distributed uniformly
            </summary>
            <param name="nDate">Input date with format YYYYMMDD</param>
            <param name="nDays">Upper boundary of random interval for days to add</param>
            <param name="sFormat">Format control string (see FormatDate)</param>
            <returns>formatted date string</returns>
        </member>
        <member name="M:SilkPerformer.Bdl.Write(System.String)">
            <summary>
            Outputs the message to the .wrt file
            </summary>
            <param name="sMessage">Message to output</param>
        </member>
        <member name="M:SilkPerformer.Bdl.Writeln">
            <summary>
            Outputs a newline to the .wrt file
            </summary>
        </member>
        <member name="M:SilkPerformer.Bdl.Writeln(System.String)">
            <summary>
            Outputs the message and a newline to the .wrt file
            </summary>
            <param name="sMessage">Message to output</param>
        </member>
        <member name="M:SilkPerformer.Bdl.GetDataFilePath(System.String)">
            <summary>
            The method returns the absolute path to a file in the data files section during the loadtest. As there are different locations for the data files depending on where the loadtest is executed (localhost, agent) this function always returns the absolute path to a data file.
            </summary>
            <param name="sFilename">Name of the data file of which the absolute path should be returned</param>
            <returns>Absolute path of the file</returns>
        </member>
        <member name="M:SilkPerformer.Bdl.GetRndVarAttr(System.Reflection.Assembly,System.String)">
            <summary>
            Returns the RandomVariableAttribute that is defined for this name
            </summary>
            <param name="sRndVarName"></param>
            <returns></returns>
        </member>
        <member name="M:SilkPerformer.Bdl.GetRndVarAttrValue(System.Reflection.Assembly,System.String)">
            <summary>
            Returns the next random value for the attribute that is assigned to the passed name
            </summary>
            <param name="sRndVarName"></param>
            <returns></returns>
        </member>
        <member name="M:SilkPerformer.Bdl.GetRandomString(System.String)">
            <summary>
            Returns the next random value for the passed random variable
            </summary>
            <param name="sRndVarName">Name of random variable</param>
            <returns></returns>
        </member>
        <member name="M:SilkPerformer.Bdl.GetRandomNumber(System.String)">
            <summary>
            Returns the next random value for the passed random variable
            </summary>
            <param name="sRndVarName">Name or random variable</param>
            <returns></returns>
        </member>
        <member name="M:SilkPerformer.Bdl.GetRandomFloat(System.String)">
            <summary>
            Returns the next random value for the passed random variable
            </summary>
            <param name="sRndVarName">Name or random variable</param>
            <returns></returns>
        </member>
        <member name="M:SilkPerformer.Bdl.LogException(System.Exception)">
            <summary>
            Logs the passed exception as an error in the truelog
            </summary>
            <param name="exp">Exception</param>
            <returns>true if successful</returns>
        </member>
        <member name="M:SilkPerformer.Bdl.LogException(System.Exception,SilkPerformer.Bdl.Severity)">
            <summary>
            Logs the passed exception as an error in the truelog
            </summary>
            <param name="exp">Exception</param>
            <param name="nSeverity">Severity if the logged error</param>
            <returns>true if successful</returns>
        </member>
        <member name="M:SilkPerformer.Bdl.LogVerification(System.String,SilkPerformer.Bdl.Severity)">
            <summary>
            Logs a custom verification message with the passed severity
            </summary>
            <param name="sVerifyMessage">Custom message that should be logged</param>
            <param name="nSeverity">Severity of this custom message</param>
        </member>
        <member name="M:SilkPerformer.Bdl.VerifyNull(System.Object,System.Boolean)">
            <summary>
            Verifes if the passed object is either null or not null
            </summary>
            <param name="oObject">Object to verify</param>
            <param name="bNull">True: object should be null. False: object should not be null</param>
            <returns>false if verification failed</returns>
        </member>
        <member name="M:SilkPerformer.Bdl.VerifyNull(System.Object,System.Boolean,SilkPerformer.Bdl.Severity)">
            <summary>
            Verifies if the passed object is either null or not null
            </summary>
            <param name="oObject">Object to verify</param>
            <param name="bNull">True: object should be null. False: object should not be null</param>
            <param name="nSeverity">Severity of the error that will be logged</param>
            <returns>false if verification failed</returns>
        </member>
        <member name="M:SilkPerformer.Bdl.VerifyEquals(System.Object,System.Object)">
            <summary>
            Verifies if two objects are equal
            </summary>
            <param name="object1">First object to be compared</param>
            <param name="object2">Second object to be compared</param>
            <returns>flase if verification failed</returns>
        </member>
        <member name="M:SilkPerformer.Bdl.VerifyEquals(System.Object,System.Object,SilkPerformer.Bdl.Severity)">
            <summary>
            Verifies if two objects are equal
            </summary>
            <param name="object1">First object to be compared</param>
            <param name="object2">Second object to be compared</param>
            <param name="nSeverity">Severity of the error that will be logged if not equal</param>
            <returns>flase if verification failed</returns>
        </member>
        <member name="M:SilkPerformer.Bdl.VerifyNotEquals(System.Object,System.Object)">
            <summary>
            Verifies if two objects are not equal
            </summary>
            <param name="object1">First object to be compared</param>
            <param name="object2">Second object to be compared</param>
            <returns>flase if verification failed</returns>
        </member>
        <member name="M:SilkPerformer.Bdl.VerifyNotEquals(System.Object,System.Object,SilkPerformer.Bdl.Severity)">
            <summary>
            Verifies if two objects are not equal
            </summary>
            <param name="object1">First object to be compared</param>
            <param name="object2">Second object to be compared</param>
            <param name="nSeverity">Severity of the error that will be logged if equal</param>
            <returns>flase if verification failed</returns>
        </member>
        <member name="M:SilkPerformer.Bdl.VerifyValue(System.String,System.String)">
            <summary>
            Verifies if the value meets the expression
            If the verification fails an error will be logged
            </summary>
            <param name="sValue">Value to verify</param>
            <param name="sExpression">Expression: can be either a string or a regular expression</param>
            <returns>false if verification failed</returns>
        </member>
        <member name="M:SilkPerformer.Bdl.VerifyValue(System.String,System.String,SilkPerformer.Bdl.VerifyOption)">
            <summary>
            Verifies if the value meets the expression
            If the verification fails an error will be logged
            </summary>
            <param name="sValue">Value to verify</param>
            <param name="sExpression">Expression: can be either a string or a regular expression</param>
            <param name="opt">type of comparison</param>
            <returns>false if verification failed</returns>
        </member>
        <member name="M:SilkPerformer.Bdl.VerifyValue(System.String,System.String,SilkPerformer.Bdl.Severity)">
            <summary>
            Verifies if the value meets the expression
            If the verification fails an error will be logged
            </summary>
            <param name="sValue">Value to verify</param>
            <param name="sExpression">Expression: can be either a string or a regular expression</param>
            <param name="nSeverity">Severity of the error that will be logged</param>
            <returns>false if verification failed</returns>
        </member>
        <member name="M:SilkPerformer.Bdl.VerifyValue(System.String,System.String,SilkPerformer.Bdl.VerifyOption,SilkPerformer.Bdl.Severity)">
            <summary>
            Verifies if the value meets the expression
            If the verification fails an error will be logged
            </summary>
            <param name="sValue">Value to verify</param>
            <param name="sExpression">Expression: can be either a string or a regular expression</param>
            <param name="opt">type of comparison</param>
            <param name="nSeverity">Severity of the error that will be logged</param>
            <returns>false if verification failed</returns>
        </member>
        <member name="M:SilkPerformer.Bdl.VerifyValue(System.Int32,System.Int32,System.Int32)">
            <summary>
            Verifies if the value is in the defined range
            If the verification fails an error will be logged
            </summary>
            <param name="nValue">Value to verify</param>
            <param name="nRangeFrom">Minimum allowed value</param>
            <param name="nRangeTo">Maximum allowed value</param>
            <returns>false if verification failed</returns>
        </member>
        <member name="M:SilkPerformer.Bdl.VerifyValue(System.Int32,System.Int32,System.Int32,SilkPerformer.Bdl.Severity)">
            <summary>
            Verifies if the value is in the defined range
            If the verification fails an error will be logged
            </summary>
            <param name="nValue">Value to verify</param>
            <param name="nRangeFrom">Minimum allowed value</param>
            <param name="nRangeTo">Maximum allowed value</param>
            <param name="nSeverity">Severity of the error that will be logged</param>
            <returns>false if verification failed</returns>
        </member>
        <member name="M:SilkPerformer.Bdl.VerifyValue(System.Int32,System.Int32,SilkPerformer.Bdl.VerifyOption)">
            <summary>
            Verifies if the value meets the required condition
            If the verification fails an error will be logged
            </summary>
            <param name="nValue">Value to verify</param>
            <param name="nCompare">Value to compare with</param>
            <param name="opt">Type of comparison</param>
            <returns>false if verification failed</returns>
        </member>
        <member name="M:SilkPerformer.Bdl.VerifyValue(System.Int32,System.Int32,SilkPerformer.Bdl.VerifyOption,SilkPerformer.Bdl.Severity)">
            <summary>
            Verifies if the value meets the required condition
            If the verification fails an error will be logged
            </summary>
            <param name="nValue">Value to verify</param>
            <param name="nCompare">Value to compare with</param>
            <param name="opt">Type of comparison</param>
            <param name="nSeverity">Severity of the error that will be logged</param>
            <returns>false if verification failed</returns>
        </member>
        <member name="M:SilkPerformer.Bdl.VerifyValue(System.Single,System.Single,System.Single)">
            <summary>
            Verifies if the value is in the defined range
            If the verification fails an error will be logged
            </summary>
            <param name="fValue">Value to verify</param>
            <param name="fRangeFrom">Minimum allowed value</param>
            <param name="fRangeTo">Maximum allowed value</param>
            <returns>false if verification failed</returns>
        </member>
        <member name="M:SilkPerformer.Bdl.VerifyValue(System.Single,System.Single,System.Single,SilkPerformer.Bdl.Severity)">
            <summary>
            Verifies if the value is in the defined range
            If the verification fails an error will be logged
            </summary>
            <param name="fValue">Value to verify</param>
            <param name="fRangeFrom">Minimum allowed value</param>
            <param name="fRangeTo">Maximum allowed value</param>
            <param name="nSeverity">Severity of the error that will be logged</param>
            <returns>false if verification failed</returns>
        </member>
        <member name="M:SilkPerformer.Bdl.VerifyValue(System.Single,System.Single,SilkPerformer.Bdl.VerifyOption)">
            <summary>
            Verifies if the value meets the required condition
            If the verification fails an error will be logged
            </summary>
            <param name="fValue">Value to verify</param>
            <param name="fCompare">Value to compare with</param>
            <param name="opt">Type of comparison</param>
            <returns>false if verification failed</returns>
        </member>
        <member name="M:SilkPerformer.Bdl.VerifyValue(System.Single,System.Single,SilkPerformer.Bdl.VerifyOption,SilkPerformer.Bdl.Severity)">
            <summary>
            Verifies if the value meets the required condition
            If the verification fails an error will be logged
            </summary>
            <param name="fValue">Value to verify</param>
            <param name="fCompare">Value to compare with</param>
            <param name="opt">Type of comparison</param>
            <param name="nSeverity">Severity of the error that will be logged</param>
            <returns>false if verification failed</returns>
        </member>
        <member name="M:SilkPerformer.Bdl.VerifyValue(System.Double,System.Double,System.Double)">
            <summary>
            Verifies if the value is in the defined range
            If the verification fails an error will be logged
            </summary>
            <param name="dValue">Value to verify</param>
            <param name="dRangeFrom">Minimum allowed value</param>
            <param name="dRangeTo">Maximum allowed value</param>
            <returns>false if verification failed</returns>
        </member>
        <member name="M:SilkPerformer.Bdl.VerifyValue(System.Double,System.Double,System.Double,SilkPerformer.Bdl.Severity)">
            <summary>
            Verifies if the value is in the defined range
            If the verification fails an error will be logged
            </summary>
            <param name="dValue">Value to verify</param>
            <param name="dRangeFrom">Minimum allowed value</param>
            <param name="dRangeTo">Maximum allowed value</param>
            <param name="nSeverity">Severity of the error that will be logged</param>
            <returns>false if verification failed</returns>
        </member>
        <member name="M:SilkPerformer.Bdl.VerifyValue(System.Double,System.Double,SilkPerformer.Bdl.VerifyOption)">
            <summary>
            Verifies if the value meets the required condition
            If the verification fails an error will be logged
            </summary>
            <param name="dValue">Value to verify</param>
            <param name="dCompare">Value to compare with</param>
            <param name="opt">Type of comparison</param>
            <returns>false if verification failed</returns>
        </member>
        <member name="M:SilkPerformer.Bdl.VerifyValue(System.Double,System.Double,SilkPerformer.Bdl.VerifyOption,SilkPerformer.Bdl.Severity)">
            <summary>
            Verifies if the value meets the required condition
            If the verification fails an error will be logged
            </summary>
            <param name="dValue">Value to verify</param>
            <param name="dCompare">Value to compare with</param>
            <param name="opt">Type of comparison</param>
            <param name="nSeverity">Severity of the error that will be logged</param>
            <returns>false if verification failed</returns>
        </member>
        <member name="M:SilkPerformer.Bdl.VerifyValue(System.DateTime,System.DateTime,System.DateTime)">
            <summary>
            Verifies if the value is in the defined range
            If the verification fails an error will be logged
            </summary>
            <param name="dtValue">Value to verify</param>
            <param name="dtRangeFrom">Minimum allowed value</param>
            <param name="dtRangeTo">Maximum allowed value</param>
            <returns>false if verification failed</returns>
        </member>
        <member name="M:SilkPerformer.Bdl.VerifyValue(System.DateTime,System.DateTime,System.DateTime,SilkPerformer.Bdl.Severity)">
            <summary>
            Verifies if the value is in the defined range
            If the verification fails an error will be logged
            </summary>
            <param name="dtValue">Value to verify</param>
            <param name="dtRangeFrom">Minimum allowed value</param>
            <param name="dtRangeTo">Maximum allowed value</param>
            <param name="nSeverity">Severity of the error that will be logged</param>
            <returns>false if verification failed</returns>
        </member>
        <member name="M:SilkPerformer.Bdl.VerifyValue(System.DateTime,System.DateTime,SilkPerformer.Bdl.VerifyOption)">
            <summary>
            Verifies if the value meets the required condition
            If the verification fails an error will be logged
            </summary>
            <param name="dtValue">Value to verify</param>
            <param name="dtCompare">Value to compare with</param>
            <param name="opt">Type of comparison</param>
            <returns>false if verification failed</returns>
        </member>
        <member name="M:SilkPerformer.Bdl.VerifyValue(System.DateTime,System.DateTime,SilkPerformer.Bdl.VerifyOption,SilkPerformer.Bdl.Severity)">
            <summary>
            Verifies if the value meets the required condition
            If the verification fails an error will be logged
            </summary>
            <param name="dtValue">Value to verify</param>
            <param name="dtCompare">Value to compare with</param>
            <param name="opt">Type of comparison</param>
            <param name="nSeverity">Severity of the error that will be logged</param>
            <returns>false if verification failed</returns>
        </member>
        <member name="M:SilkPerformer.Bdl.VerifyValue(System.TimeSpan,System.TimeSpan,System.TimeSpan)">
            <summary>
            Verifies if the value is in the defined range
            If the verification fails an error will be logged
            </summary>
            <param name="tsValue">Value to verify</param>
            <param name="tsRangeFrom">Minimum allowed value</param>
            <param name="tsRangeTo">Maximum allowed value</param>
            <returns>false if verification failed</returns>
        </member>
        <member name="M:SilkPerformer.Bdl.VerifyValue(System.TimeSpan,System.TimeSpan,System.TimeSpan,SilkPerformer.Bdl.Severity)">
            <summary>
            Verifies if the value is in the defined range
            If the verification fails an error will be logged
            </summary>
            <param name="tsValue">Value to verify</param>
            <param name="tsRangeFrom">Minimum allowed value</param>
            <param name="tsRangeTo">Maximum allowed value</param>
            <param name="nSeverity">Severity of the error that will be logged</param>
            <returns>false if verification failed</returns>
        </member>
        <member name="M:SilkPerformer.Bdl.VerifyValue(System.TimeSpan,System.TimeSpan,SilkPerformer.Bdl.VerifyOption)">
            <summary>
            Verifies if the value meets the required condition
            If the verification fails an error will be logged
            </summary>
            <param name="tsValue">Value to verify</param>
            <param name="tsCompare">Value to compare with</param>
            <param name="opt">Type of comparison</param>
            <returns>false if verification failed</returns>
        </member>
        <member name="M:SilkPerformer.Bdl.VerifyValue(System.TimeSpan,System.TimeSpan,SilkPerformer.Bdl.VerifyOption,SilkPerformer.Bdl.Severity)">
            <summary>
            Verifies if the value meets the required condition
            If the verification fails an error will be logged
            </summary>
            <param name="tsValue">Value to verify</param>
            <param name="tsCompare">Value to compare with</param>
            <param name="opt">Type of comparison</param>
            <param name="nSeverity">Severity of the error that will be logged</param>
            <returns>false if verification failed</returns>
        </member>
        <member name="M:SilkPerformer.Bdl.VerifyValue(System.Boolean,System.Boolean)">
            <summary>
            Verifies the boolean value
            If the verification fails an error will be logged
            </summary>
            <param name="bValue">Value to verify</param>
            <param name="bCompare">Expected value</param>
            <returns>false if verification failed</returns>
        </member>
        <member name="M:SilkPerformer.Bdl.VerifyValue(System.Boolean,System.Boolean,SilkPerformer.Bdl.Severity)">
            <summary>
            Verifies the boolean value
            If the verification fails an error will be logged
            </summary>
            <param name="bValue">Value to verify</param>
            <param name="bCompare">Expected value</param>
            <param name="nSeverity">Severity of the error that will be logged</param>
            <returns>false if verification failed</returns>
        </member>
        <member name="M:SilkPerformer.Bdl.GetFileContentString(System.String)">
            <summary>
            Reads the file content and returns it as string
            </summary>
            <param name="sFilename">Name of the file that should be opened</param>
            <returns>Returns the content if the file could be opened successfully - otherwise null</returns>
        </member>
        <member name="M:SilkPerformer.Bdl.GetFileContent(System.String)">
            <summary>
            Reads the file content and returns it as byte array
            </summary>
            <param name="sFilename">Name of the file that should be opened</param>
            <returns>Returns the content if the file could be opened successfully - otherwise null</returns>
        </member>
        <member name="T:SilkPerformer.Bdl.PrintDisplay">
            <summary>Monitor settings - can be used with the print statement</summary>
        </member>
        <member name="F:SilkPerformer.Bdl.PrintDisplay.OPT_DISPLAY_ERRORS">
            <summary>Errors</summary>
        </member>
        <member name="F:SilkPerformer.Bdl.PrintDisplay.OPT_DISPLAY_TRANSACTIONS">
            <summary>Transactions</summary>
        </member>
        <member name="F:SilkPerformer.Bdl.PrintDisplay.OPT_DISPLAY_TIMERS">
            <summary>Timers</summary>
        </member>
        <member name="F:SilkPerformer.Bdl.PrintDisplay.OPT_DISPLAY_FUNCTIONS">
            <summary>Functions</summary>
        </member>
        <member name="F:SilkPerformer.Bdl.PrintDisplay.OPT_DISPLAY_INFO">
            <summary>Information</summary>
        </member>
        <member name="F:SilkPerformer.Bdl.PrintDisplay.OPT_DISPLAY_DATA">
            <summary>Data</summary>
        </member>
        <member name="F:SilkPerformer.Bdl.PrintDisplay.OPT_DISPLAY_CHECKPOINTS">
            <summary>Checkpoints</summary>
        </member>
        <member name="F:SilkPerformer.Bdl.PrintDisplay.OPT_DISPLAY_ALL">
            <summary>This will display the message separate from of the Monitor window settings</summary>
        </member>
        <member name="T:SilkPerformer.Bdl.PrintColor">
            <summary>
            Color for the print statement
            </summary>
        </member>
        <member name="F:SilkPerformer.Bdl.PrintColor.TEXT_GRAY">
            <summary>Gray</summary>
        </member>
        <member name="F:SilkPerformer.Bdl.PrintColor.TEXT_BLACK">
            <summary>Black</summary>
        </member>
        <member name="F:SilkPerformer.Bdl.PrintColor.TEXT_RED">
            <summary>Red</summary>
        </member>
        <member name="F:SilkPerformer.Bdl.PrintColor.TEXT_BLUE">
            <summary>Blue</summary>
        </member>
        <member name="F:SilkPerformer.Bdl.PrintColor.TEXT_GREEN">
            <summary>Green</summary>
        </member>
        <member name="F:SilkPerformer.Bdl.PrintColor.TEXT_MAGENTA">
            <summary>Magenta</summary>
        </member>
        <member name="T:SilkPerformer.Bdl.Severity">
            <summary>
            The severity of an error can be one of the enum members
            </summary>
        </member>
        <member name="F:SilkPerformer.Bdl.Severity.SEVERITY_SUCCESS">
            <summary>Success, no error</summary>
        </member>
        <member name="F:SilkPerformer.Bdl.Severity.SEVERITY_INFORMATIONAL">
            <summary>Informational</summary>
        </member>
        <member name="F:SilkPerformer.Bdl.Severity.SEVERITY_WARNING">
            <summary>Warning</summary>
        </member>
        <member name="F:SilkPerformer.Bdl.Severity.SEVERITY_ERROR">
            <summary>Error, simulation continues</summary>
        </member>
        <member name="F:SilkPerformer.Bdl.Severity.SEVERITY_TRANS_EXIT">
            <summary>Error, the active transaction is aborted</summary>
        </member>
        <member name="F:SilkPerformer.Bdl.Severity.SEVERITY_PROCESS_EXIT">
            <summary>Error, the simulation is aborted</summary>
        </member>
        <member name="T:SilkPerformer.Bdl.MeasureKind">
            <summary>
            Specifies the different types of measures
            </summary>
        </member>
        <member name="F:SilkPerformer.Bdl.MeasureKind.MEASURE_KIND_SUM">
            <summary>Retrieves the sum of all measure values, for example, the total time for executing all transactions</summary>
        </member>
        <member name="F:SilkPerformer.Bdl.MeasureKind.MEASURE_KIND_COUNT">
            <summary>Retrieves the number how often an action was performed, for example, how often a counter was incremented, or how often a transaction was executed</summary>
        </member>
        <member name="F:SilkPerformer.Bdl.MeasureKind.MEASURE_KIND_AVERAGE">
            <summary>Returns the average of all measure values, for example, the average time required for a CORBA operation call</summary>
        </member>
        <member name="F:SilkPerformer.Bdl.MeasureKind.MEASURE_KIND_MIN">
            <summary>Returns the minimum of all measure values</summary>
        </member>
        <member name="F:SilkPerformer.Bdl.MeasureKind.MEASURE_KIND_MAX">
            <summary>Returns the maximum of all measure values</summary>
        </member>
        <member name="F:SilkPerformer.Bdl.MeasureKind.MEASURE_KIND_SQSUM">
            <summary>Calculates for each measure value the square value, and sums up all square values</summary>
        </member>
        <member name="F:SilkPerformer.Bdl.MeasureKind.MEASURE_KIND_STDEVIATION">
            <summary>Returns the standard deviation of all measured values</summary>
        </member>
        <member name="F:SilkPerformer.Bdl.MeasureKind.MEASURE_KIND_LAST">
            <summary>Returns the last value set for the measure</summary>
        </member>
        <member name="T:SilkPerformer.Bdl.MeasureUsage">
            <summary>
            Defines the way in which the Performance Explorer displays the counter by default
            </summary>
        </member>
        <member name="F:SilkPerformer.Bdl.MeasureUsage.MEASURE_USAGE_TIMER">
            <summary>The average value is displayed by default</summary>
        </member>
        <member name="F:SilkPerformer.Bdl.MeasureUsage.MEASURE_USAGE_SUM_COUNTER">
            <summary>The sum is displayed by default</summary>
        </member>
        <member name="F:SilkPerformer.Bdl.MeasureUsage.MEASURE_USAGE_AVG_COUNTER">
            <summary>The average value is displayed by default</summary>
        </member>
        <member name="F:SilkPerformer.Bdl.MeasureUsage.MEASURE_USAGE_SUMONLY_COUNTER">
            <summary>The sum is displayed as default. In this case you cannot choose a different data source</summary>
        </member>
        <member name="F:SilkPerformer.Bdl.MeasureUsage.MEASURE_USAGE_EVENT_COUNTER">
            <summary>The count value is displayed by default</summary>
        </member>
        <member name="F:SilkPerformer.Bdl.MeasureUsage.MEASURE_USAGE_AVGONLY_COUNTER">
            <summary>The average is displayed by default. In this case you cannot choose a different data source</summary>
        </member>
        <member name="T:SilkPerformer.Bdl.MeasureClass">
            <summary>
            Specifies the type of measure to retrieve
            To retrieve the value of a custom time measure, pass the MEASURE_TIMER_RESPONSETIME parameter to the function.
            To retrieve the value of a custom counter, pass the MEASURE_COUNTER_CUSTOMCOUNTER parameter to the function.
            To retrieve the value of an average counter, pass the MEASURE_COUNTER_AVERAGE parameter to the function.
            In any other case, pass any of the enum members as parameters to the function, depending on the type of information you are interested in
            </summary>
        </member>
        <member name="F:SilkPerformer.Bdl.WriteDataOption.OPT_WRITEDATA_PRINTABLE">
            <summary>If the string buffer contains only printable characters, the ASCII representation of the data is printed. Otherwise, a mixed notation is used</summary>
        </member>
        <member name="F:SilkPerformer.Bdl.WriteDataOption.OPT_WRITEDATA_HEX">
            <summary>A mixed notation is used for writing </summary>
        </member>
        <member name="F:SilkPerformer.Bdl.WriteDataOption.OPT_WRITEDATA_HEXONLY">
            <summary>The data is printed in hexadecimal notation</summary>
        </member>
        <member name="F:SilkPerformer.Bdl.VerifyOption.OPT_VERIFY_EQUAL">
            <summary>Verify that the value is equal than the passed value</summary>
        </member>
        <member name="F:SilkPerformer.Bdl.VerifyOption.OPT_VERIFY_SMALLER">
            <summary>Verify that the value is smaller than the passed value</summary>
        </member>
        <member name="F:SilkPerformer.Bdl.VerifyOption.OPT_VERIFY_SMALLEREQUAL">
            <summary>Verify that the value is smaller or equeal than the passed value</summary>
        </member>
        <member name="F:SilkPerformer.Bdl.VerifyOption.OPT_VERIFY_GREATEREQUAL">
            <summary>Verify that the value is greater or equeal than the passed value</summary>
        </member>
        <member name="F:SilkPerformer.Bdl.VerifyOption.OPT_VERIFY_GREATER">
            <summary>Verify that the value is greater than the passed value</summary>
        </member>
        <member name="F:SilkPerformer.Bdl.VerifyOption.OPT_VERIFY_NOTEQUAL">
            <summary>Verify that the value is not equal than the passed value</summary>
        </member>
        <member name="F:SilkPerformer.Bdl.VerifyOption.OPT_VERIFY_IGNORE_CASE">
            <summary>Verify that the string value is equal than the passed value - ignore case</summary>
        </member>
        <member name="F:SilkPerformer.Bdl.VerifyOption.OPT_VERIFY_REG_EXPRESSION">
            <summary>Verify that the value matches the regular expression - only valid for strings</summary>
        </member>
        <member name="T:SilkPerformer.ConsoleRedirect">
            <summary>
            For Internal use only
            </summary>
        </member>
        <member name="T:SilkPerformer.UnitTesting">
            <summary>
            For Internal use only
            </summary>
        </member>
        <member name="T:SilkPerformer.VirtualUserAttribute">
            <summary>
            Indicates a class to become a Silk Performer Virtual User
            Apply this attribute to your test class
            The Add-In will generate a virtual user in the BDL script
            </summary>
        </member>
        <member name="F:SilkPerformer.VirtualUserAttribute.msUserName">
            <value>Name of Virtual User in generated BDL Script</value>
        </member>
        <member name="F:SilkPerformer.VirtualUserAttribute.mbIsUnitTestClass">
            <value>Indicates whether this is a unit test class. If true, DotNetUnitTest methods will be created in the BDL script</value>
        </member>
        <member name="M:SilkPerformer.VirtualUserAttribute.#ctor">
            <summary>
            Declares a Virtual User
            Virtual user will be named like the class
            </summary>
        </member>
        <member name="M:SilkPerformer.VirtualUserAttribute.#ctor(System.String)">
            <summary>
            Declares a Virtual User
            </summary>
            <param name="sUserName">Name of Virtual User in generated BDL Script</param>
        </member>
        <member name="M:SilkPerformer.VirtualUserAttribute.#ctor(System.String,System.Boolean)">
            <summary>
            Declares a Virtual User
            </summary>
            <param name="sUserName">Name of Virtual User in generated BDL Script</param>
            <param name="bIsUnitTest">Indicates whether this is a unit test class. If true, DotNetUnitTest methods will be created in the BDL script</param>
        </member>
        <member name="T:SilkPerformer.VirtualUserInitializeAttribute">
            <summary>
            Indicates that the method will be called before the first TestMethod will be called
            Allows you to initialize your environment for all TestMethod's
            </summary>
        </member>
        <member name="T:SilkPerformer.VirtualUserCleanupAttribute">
            <summary>
            Indicates that the method will be called after the last TestMethod has been called
            Allows you to do some cleanup after all TestMethod's have been executed
            </summary>
        </member>
        <member name="T:SilkPerformer.ETransactionType">
            <summary>
            Transaction type defines which type of transaction your .NET transaction method will become in BDL
            </summary>
        </member>
        <member name="F:SilkPerformer.ETransactionType.TRANSTYPE_INIT">
            <summary>Transaction will become an INIT transaction</summary>
        </member>
        <member name="F:SilkPerformer.ETransactionType.TRANSTYPE_MAIN">
            <summary>Transaction will become a main transaction</summary>
        </member>
        <member name="F:SilkPerformer.ETransactionType.TRANSTYPE_END">
            <summary>Transaction will become an END transaction</summary>
        </member>
        <member name="T:SilkPerformer.TransactionAttribute">
            <summary>
            Indicates a method to become a BDL transaction
            Apply this attribute to methods that implement the transaction logic
            TransactionType defines if its an INIT, MAIN or END transaction
            You can define a calling count for a MAIN transaction
            The Add-In will generate a transaction in the BDL script
            </summary>
        </member>
        <member name="F:SilkPerformer.TransactionAttribute.mnCount">
            <value>Defines the number of time the transaction will be called if its a MAIN transaction</value>
        </member>
        <member name="F:SilkPerformer.TransactionAttribute.meType">
            <value>Defines the type of transaction. A virtual user can have one INIT, one END and multiple MAIN transactions</value>
        </member>
        <member name="F:SilkPerformer.TransactionAttribute.msTransactionName">
            <value>Optional name of the transaction in the generated BDL script. By default - the transaction name is the name of the test class and the test method.
            This could lead to an uncompilable script in BDL as a transaction name cannot exceed 16 characters</value>
        </member>
        <member name="M:SilkPerformer.TransactionAttribute.#ctor(SilkPerformer.ETransactionType)">
            <summary>
            Method will become a transaction of the passed transaction type
            </summary>
            <param name="eType">Type of transaction. There can be only one INIT and one END transaction per virtual user class</param>
        </member>
        <member name="M:SilkPerformer.TransactionAttribute.#ctor(SilkPerformer.ETransactionType,System.String)">
            <summary>
            Method will become a transaction of the passed transaction type
            </summary>
            <param name="eType">Type of transaction. There can be only one INIT and one END transaction per virtual user class</param>
            <param name="sName">Name of the transaction name in the generated BDL script.</param>
        </member>
        <member name="M:SilkPerformer.TransactionAttribute.#ctor(SilkPerformer.ETransactionType,System.Int32)">
            <summary>
            Method will become a transaction of the passed transaction type
            </summary>
            <param name="eType">Type of transaction. There can be only one INIT and one END transaction per virtual user class</param>
            <param name="nCount">Number of times the MAIN transaction should be called during loadtest. This value is only valid if the transaction type is MAIN</param>
        </member>
        <member name="M:SilkPerformer.TransactionAttribute.#ctor(SilkPerformer.ETransactionType,System.Int32,System.String)">
            <summary>
            Method will become a transaction of the passed transaction type
            </summary>
            <param name="eType">Type of transaction. There can be only one INIT and one END transaction per virtual user class</param>
            <param name="nCount">Number of times the MAIN transaction should be called during loadtest. This value is only valid if the transaction type is MAIN</param>
            <param name="sName">Name of the transaction name in the generated BDL script.</param>
        </member>
        <member name="T:SilkPerformer.TestMethodAttribute">
            <summary>
            Indicates that the method will be called from the preceding transaction method
            The Add-In will script the appropriate BDL calls to call this method.
            </summary>
        </member>
        <member name="M:SilkPerformer.TestMethodAttribute.#ctor">
            <summary>
            Indicates the method will be called from the preceding transaction method
            The Add-In will script the appropriate BDL calls to call this method.
            </summary>
        </member>
        <member name="T:SilkPerformer.TestInitializeAttribute">
            <summary>
            Indicates that the method will be called befor each TestMethod
            Allows you to initialize your environment for each TestMethod execution
            </summary>
        </member>
        <member name="T:SilkPerformer.TestCleanupAttribute">
            <summary>
            Indicates that the method will be called after each TestMethod
            Allows you to do some cleanup work after each TestMethod execution
            </summary>
        </member>
        <member name="T:SilkPerformer.TestExceptionAttribute">
            <summary>
            Indicates that the method is supposed to throw an exception of the type that is passed as expected exception
            The method call is successful if the exception is thrown - otherwise it is considered as a failed call
            </summary>
        </member>
        <member name="F:SilkPerformer.TestExceptionAttribute.mExpectedExcpetionType">
            <value>Type of the exception that is expected to be thrown</value>
        </member>
        <member name="F:SilkPerformer.TestExceptionAttribute.msMessage">
            <value>An additional message that will be logged to the log file</value>
        </member>
        <member name="M:SilkPerformer.TestExceptionAttribute.#ctor(System.Type)">
            <summary>
            Indicates that the method is supposed to thrown an exception
            </summary>
            <param name="expectedException">Type of Exception that has to be thrown by the method</param>
        </member>
        <member name="M:SilkPerformer.TestExceptionAttribute.#ctor(System.Type,System.String)">
            <summary>
            Indicates that the method is supposed to thrown an exception
            </summary>
            <param name="expectedException">Type of Exception that has to be thrown by the method</param>
            <param name="sMessage">Additional message that will be logged</param>
        </member>
        <member name="P:SilkPerformer.TestExceptionAttribute.ExpectedExceptionType">
            <value>Type of the exception that is expected to be thrown</value>
        </member>
        <member name="P:SilkPerformer.TestExceptionAttribute.Message">
            <value>An additional message that will be logged to the log file</value>
        </member>
        <member name="T:SilkPerformer.TestIgnoreAttribute">
            <summary>
            Indicates that this method should not be called from a DotNetCallMethod call
            The IgnoreMessage will be logged to indicate the reason for this behavior
            </summary>
        </member>
        <member name="F:SilkPerformer.TestIgnoreAttribute.msIgnoreMessage">
            <value>Message that will be logged to the log files</value>
        </member>
        <member name="M:SilkPerformer.TestIgnoreAttribute.#ctor(System.String)">
            <summary>
            Indicates that the method should not be called from a DotNetCallMethod call
            </summary>
            <param name="sIgnoreMessage">Message that will be logged to the log files</param>
        </member>
        <member name="P:SilkPerformer.TestIgnoreAttribute.IgnoreMessage">
            <value>Message that will be logged to the log files</value>
        </member>
        <member name="T:SilkPerformer.TestAttributeAttribute">
            <summary>
            Apply this attribute to a transaction or test method to define BDL attributes
            The Add-In will script a AttributeSet method in the BDL script prior to the method call
            Therefore you can get the attributes value with Bdl.AttributeGet
            A transaction/method can have multiple attribute definitions
            </summary>
        </member>
        <member name="F:SilkPerformer.TestAttributeAttribute.msAttrName">
            <value>Name of the attribute</value>
        </member>
        <member name="F:SilkPerformer.TestAttributeAttribute.msDefValue">
            <value>Default value of a stirng attribute</value>
        </member>
        <member name="F:SilkPerformer.TestAttributeAttribute.mnDefValue">
            <value>Default value of a number attribute</value>
        </member>
        <member name="F:SilkPerformer.TestAttributeAttribute.mdDefValue">
            <value>Default value of a flaot attribute</value>
        </member>
        <member name="F:SilkPerformer.TestAttributeAttribute.mbDefValue">
            <value>Default value of a boolean attribute</value>
        </member>
        <member name="F:SilkPerformer.TestAttributeAttribute.msDescription">
            <value>Description of the attribute</value>
        </member>
        <member name="F:SilkPerformer.TestAttributeAttribute.meType">
            <value>Type of attribute</value>
        </member>
        <member name="M:SilkPerformer.TestAttributeAttribute.#ctor(System.String,System.String)">
            <summary>
            Defines a string BDL attribute
            </summary>
            <param name="sAttributeName">Name of the attribute</param>
            <param name="sDefaultValue">Default value of the attribute</param>
        </member>
        <member name="M:SilkPerformer.TestAttributeAttribute.#ctor(System.String,System.String,System.String)">
            <summary>
            Defines a string BDL attribute
            </summary>
            <param name="sAttributeName">Name of the attribute</param>
            <param name="sDefaultValue">Default value of the attribute</param>
            <param name="sDescription">Description of the attribute</param>
        </member>
        <member name="M:SilkPerformer.TestAttributeAttribute.#ctor(System.String,System.Int32)">
            <summary>
            Defines a number BDL attribute
            </summary>
            <param name="sAttributeName">Name of the attribute</param>
            <param name="sDefaultValue">Default value of the attribute</param>
        </member>
        <member name="M:SilkPerformer.TestAttributeAttribute.#ctor(System.String,System.Int32,System.String)">
            <summary>
            Defines a number BDL attribute
            </summary>
            <param name="sAttributeName">Name of the attribute</param>
            <param name="sDefaultValue">Default value of the attribute</param>
            <param name="sDescription">Description of the attribute</param>
        </member>
        <member name="M:SilkPerformer.TestAttributeAttribute.#ctor(System.String,System.Double)">
            <summary>
            Defines a float BDL attribute
            </summary>
            <param name="sAttributeName">Name of the attribute</param>
            <param name="sDefaultValue">Default value of the attribute</param>
        </member>
        <member name="M:SilkPerformer.TestAttributeAttribute.#ctor(System.String,System.Double,System.String)">
            <summary>
            Defines a float BDL attribute
            </summary>
            <param name="sAttributeName">Name of the attribute</param>
            <param name="sDefaultValue">Default value of the attribute</param>
            <param name="sDescription">Description of the attribute</param>
        </member>
        <member name="M:SilkPerformer.TestAttributeAttribute.#ctor(System.String,System.Boolean)">
            <summary>
            Defines a boolean BDL attribute
            </summary>
            <param name="sAttributeName">Name of the attribute</param>
            <param name="sDefaultValue">Default value of the attribute</param>
        </member>
        <member name="M:SilkPerformer.TestAttributeAttribute.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Defines a boolean BDL attribute
            </summary>
            <param name="sAttributeName">Name of the attribute</param>
            <param name="sDefaultValue">Default value of the attribute</param>
            <param name="sDescription">Description of the attribute</param>
        </member>
        <member name="T:SilkPerformer.BdlParameterAttribute">
            <summary>
            This attribute can be applied to the return value of a transaction/method
            It defines how the variable in BDL should be named for the return value
            The Add-In will script a local variable that will receive the return value of the method
            </summary>
        </member>
        <member name="F:SilkPerformer.BdlParameterAttribute.msName">
            <value>Name of the variable in BDL where the return value will be stored</value>
        </member>
        <member name="M:SilkPerformer.BdlParameterAttribute.#ctor(System.String)">
            <summary>
            Defines the name of the variable in BDL where the return value of the transaction/method call will be stored
            </summary>
            <param name="sName">Name of variable</param>
        </member>
        <member name="T:SilkPerformer.DefaultValueAttribute">
            <summary>
            This attribute can be applied to parameters of a method and defines the default value
            for the parameter that will be scripted in the resulting bdl script for the method call
            </summary>
        </member>
        <member name="F:SilkPerformer.DefaultValueAttribute.mDefaultValue">
            <value>Default value for the parameter that will be scripted in the generated bdl script</value>
        </member>
        <member name="T:SilkPerformer.RandomVarType">
            <summary>
            Types of random variables. Used with the RandomVariable attribute
            </summary>
        </member>
        <member name="F:SilkPerformer.RandomVarType.RndExpF">
            <summary>Declares a random variable of type RndExpF. With each access, such a variable contains a floating-point value that is generated following an exponential distribution. The parameter of the RndExpF function constitutes the mean value of the exponential distribution</summary>
        </member>
        <member name="F:SilkPerformer.RandomVarType.RndUniF">
            <summary>Declares a random variable of type RndUniF. With each access, such a variable contains a value that is generated following a uniform distribution. The parameters of the RndUniF function specify the minimum value and the maximum value of the uniform distribution. Random variables of type RndUniF can be used solely in wait statements for generating random user times</summary>
        </member>
        <member name="F:SilkPerformer.RandomVarType.RndUniN">
            <summary>Declares a random variable of type RndUniN. With each access, such a variable contains a value that is generated following a uniform distribution. The parameters of the RndUniN function specify the minimum value and the maximum value of the uniform distribution. Within these boundaries all integer values have the same probability (including the boundaries).</summary>
        </member>
        <member name="F:SilkPerformer.RandomVarType.RndUniI">
            <summary>Declares a random variable of type RndUniI. With each access, such a variable contains a value that is generated following a uniform distribution with intervals. With a random variable of type RndUniI you can define multiple intervals of random integer values</summary>
        </member>
        <member name="F:SilkPerformer.RandomVarType.RndStr">
            <summary>Declares a random variable of type RndStr. With each access, such a variable contains a random string value. The characters of the string and the length of the string are generated randomly following a uniform distribution</summary>
        </member>
        <member name="F:SilkPerformer.RandomVarType.RndExpN">
            <summary>Declares a random variable of type RndExpN. With each access, such a variable contains a random integer value that is generated following an exponential distribution. The floating-point values of the exponential distribution are rounded to integer values (1.5 —>—> 2, 1.4 —>—> 1, ...).</summary>
        </member>
        <member name="F:SilkPerformer.RandomVarType.RndInd">
            <summary>Declares a random variable of type RndInd. With each access, such a variable contains a random value whose type is either string or integer, depending on the syntax of your declaration. All possible values of the random variable along with their probabilities must be declared. You cannot mix integer and string values</summary>
        </member>
        <member name="F:SilkPerformer.RandomVarType.RndBin">
            <summary>Declares a random variable of type RndBin. With each access, such a variable contains a boolean value that is generated following a binomial (Bernoulli) distribution. The parameter of the RndBin random type specifies the probability of returning true. For example, you can use a random variable using the RndBin random type to specify the probability of running transaction components</summary>
        </member>
        <member name="F:SilkPerformer.RandomVarType.RndPerN">
            <summary>Declares a random variable of type RndPerN. With each access, such a variable contains a unique random integer value that is generated following a uniform distribution. The parameter of the RndPerN function specifies the maximum value of the uniform distribution. The minimum random value is 1. Within these boundaries (and including the boundaries) all integer values have the same probability of being selected. No value in the specified interval is selected twice. If all values have been selected, the maximum value+1 is returned. You can compare the RndPerN function with a drawing of lots where no lot is put back</summary>
        </member>
        <member name="F:SilkPerformer.RandomVarType.RndFile">
            <summary>Declares a random variable of type RndFile. With each access, such a variable contains a random string value that is generated following a uniform distribution. The strings are selected randomly from a pattern file. The values in the pattern file must be separated with semicolons (;). Leading blanks, tabs and newline characters are ignored. Trailing blanks, tabs or new line characters are part of the value. Each position in the pattern file has the same probability of being chosen. The position in the pattern file is generated randomly. The value located at the randomly generated position is chosen to be the next value of the random type</summary>
        </member>
        <member name="F:SilkPerformer.RandomVarType.RndStream">
            <summary>Declares a random variable of type RndStream. With each access, such a variable contains a string value selected in sequential order from a pattern file. RndStream reads the values of a file sequentially starting at the beginning of the file. If the end of the file is reached, the next call of RndStream starts at the beginning of the file again. The Silk Performer Reset function has the same effect. The values in the pattern file must be separated with semicolons (;). Leading blanks, tabs and new-line characters are ignored</summary>
        </member>
        <member name="F:SilkPerformer.RandomVarType.RndSno">
            <summary>Generates serial numbers of type integer. For each call, the RndSno type returns a value incremented by one over the previous call</summary>
        </member>
        <member name="T:SilkPerformer.RandomVariableAttribute">
            <summary>
            This attribute can be applied to the virtual user.
            It allows you to use a bdl random variable. The Bdl script will declare a random variable - as
            defined in the parameters of this attribute - in the dclrand section of the script
            </summary>
        </member>
        <member name="F:SilkPerformer.RandomVariableAttribute.meRndVarType">
            <value>Defines the type of Random variable</value>
        </member>
        <member name="F:SilkPerformer.RandomVariableAttribute.msParameter">
            <value>Parameter for the BDL Random Type definition</value>
        </member>
        <member name="F:SilkPerformer.RandomVariableAttribute.msName">
            <value>Name of the random variable</value>
        </member>
        <member name="F:SilkPerformer.RandomVariableAttribute.msError">
            <value>Will receive the error message if there is a wrong definition of the parameters</value>
        </member>
        <member name="T:SilkPerformer.SPAsyncResult">
            <summary>
            Own IAsyncResult Implementation
            Is used for asynchronous web requests
            Please see documenation of the interface IAsyncResult
            </summary>
        </member>
        <member name="T:SilkPerformer.SPHttpRequest">
            <summary>
            Our WebRequest Implementation
            Please see documentation of base class
            </summary>
        </member>
        <member name="T:SilkPerformer.SPHttpRequestCreator">
            <summary>
            Implementation of IWebRequestCreate
            The Create method of this class will be called if we redirect a protocol via configuration in the .config file
            </summary>
        </member>
        <member name="T:SilkPerformer.SPHttpResponse">
            <summary>
            SilkPerformer's WebResponse Implementation
            Please see documentation of base class
            </summary>
        </member>
        <member name="T:SilkPerformer.SPHttpResponseCreator">
            <summary>
            Response creator class
            Will create a SPHttpResponse object
            </summary>
        </member>
        <member name="T:SilkPerformer.SPSoapHttpClientProtocol">
            <summary>
            Specifies the class client proxies derive from when using SOAP
            Derive your proxy classes from this class to route HTTP traffic over the SilkPerformer WebEngine
            </summary>
            <remarks>Routing HTTP traffic allows you to take advantage of the WebEngine features (Modem Simulation, IP Multiplexing, ...)
            You'll also get nodes in the TrueLog for every HTTP Request/Response
            </remarks>
        </member>
        <member name="F:SilkPerformer.SPSoapHttpClientProtocol.sCurrentMethodName">
            <value>Name of the invoked method. This will become the name of the form counter</value>
        </member>
        <member name="M:SilkPerformer.SPSoapHttpClientProtocol.GetWebRequest(System.Uri)">
            <summary>
            Returns the SilkPerformer WebRequest object for the specified URL
            </summary>
            <param name="uri">The Uri to use when creating the WebRequest</param>
            <returns>The SPHttpRequest instance</returns>
        </member>
        <member name="M:SilkPerformer.SPSoapHttpClientProtocol.Invoke(System.String,System.Object[])">
            <summary>
            Invokes an XML Web service method synchronously using SOAP.
            </summary>
            <param name="methodName">The name of the XML Web service method</param>
            <param name="parameters">An array of objects containing the parameters to pass to the XML Web service. The order of the values in the array correspond to the order of the parameters in the calling method of the derived class</param>
            <returns>An array of objects containing the return value and any by reference or out parameters of the derived class method</returns>
        </member>
        <member name="M:SilkPerformer.SPSoapHttpClientProtocol.BeginInvoke(System.String,System.Object[],System.AsyncCallback,System.Object)">
            <summary>
            Starts an asynchronous invocation of an XML Web service method using SOAP
            </summary>
            <param name="methodName">The name of the XML Web service method in the derived class that is invoking BeginInvoke</param>
            <param name="parameters">An array of objects containing the parameters to pass to the XML Web service. The order of the values in the array correspond to the order of the parameters in the calling method of the derived class</param>
            <param name="callback">The delegate to call when the asynchronous invoke is complete. If callback is a null reference (Nothing in Visual Basic), the delegate is not called</param>
            <param name="asyncState">Extra information supplied by the caller</param>
            <returns>An IAsyncResult (SPAsyncResult) which is passed to EndInvoke to obtain the return values from the remote method call</returns>
        </member>
        <member name="M:SilkPerformer.SPTcpClientTransportSink.AsyncProcessRequest(System.Runtime.Remoting.Channels.IClientChannelSinkStack,System.Runtime.Remoting.Messaging.IMessage,System.Runtime.Remoting.Channels.ITransportHeaders,System.IO.Stream)">
            <summary>
            This method is called by the framework if we are going to call a method asynchronously
            A OneWay method doesn't provide return value -> therefore just send the request
            In a not OneWay scenario we send the request and will call the sinkstack when the response arrived
            </summary>
            <param name="stack"></param>
            <param name="msg"></param>
            <param name="headers"></param>
            <param name="stream"></param>
        </member>
        <member name="M:SilkPerformer.SPTcpClientTransportSink.ProcessMessage(System.Runtime.Remoting.Messaging.IMessage,System.Runtime.Remoting.Channels.ITransportHeaders,System.IO.Stream,System.Runtime.Remoting.Channels.ITransportHeaders@,System.IO.Stream@)">
            <summary>
            This method is called by the framework to do a synchronous processing of the message
            </summary>
            <param name="msg"></param>
            <param name="reqHead"></param>
            <param name="reqStm"></param>
            <param name="respHead"></param>
            <param name="respStm"></param>
        </member>
        <member name="M:SilkPerformer.SPTcpClientTransportSink.BuildRequestStream(System.Runtime.Remoting.Messaging.IMessage,System.IO.Stream,System.Runtime.Remoting.Channels.ITransportHeaders)">
            <summary>
            Builds the request Stream
            </summary>
            <param name="msg"></param>
            <param name="reqStream"></param>
            <param name="headers"></param>
            <returns></returns>
        </member>
        <member name="M:SilkPerformer.SPTcpClientTransportSink.BuildRequestHeaderStream(System.Runtime.Remoting.Messaging.IMessage,System.Int32,System.Runtime.Remoting.Channels.ITransportHeaders)">
            <summary>
            Build the request header stream
            </summary>
            <param name="msg"></param>
            <param name="contentLength"></param>
            <param name="headers"></param>
            <returns></returns>
        </member>
        <member name="M:SilkPerformer.SPTcpClientTransportSink.WriteContentTypeHeader(System.String,System.IO.Stream)">
            <summary>
            Writes the content type header to the stream
            </summary>
            <param name="sValue"></param>
            <param name="stream"></param>
        </member>
        <member name="M:SilkPerformer.SPTcpClientTransportSink.WriteCustomHeader(System.String,System.String,System.IO.Stream)">
            <summary>
            Writes a custom Header to the stream
            </summary>
            <param name="sName"></param>
            <param name="sValue"></param>
            <param name="stream"></param>
        </member>
        <member name="M:SilkPerformer.SPTcpClientTransportSink.WriteHeaders(System.Runtime.Remoting.Channels.ITransportHeaders,System.IO.Stream)">
            <summary>
            Writes the transport headers to the stream
            Headers leading with '__' will not be written to the stream - these are internal headers
            Content-Type is a special header of type TcpHeaders.ContentType
            All other headers are custom headers of type TcpHeaders.Custom
            </summary>
            <param name="headers"></param>
            <param name="stream"></param>
        </member>
        <member name="M:SilkPerformer.SPTcpClientTransportSink.WriteCountedString(System.String,System.IO.Stream)">
            <summary>
            writes the string to the stream in the following format 
            The first byte specifies the encoding style (0=Unicode, 1=UTF8)
            The next Int32 specifies the string length,
            Then follows the actual string value
            This function is writing the string in UTF8-Encoding
            </summary>
            <param name="sString"></param>
            <param name="stream"></param>
        </member>
        <member name="M:SilkPerformer.SPTcpClientTransportSink.ReadCountedString(System.IO.Stream)">
            <summary>
            Reads a counted string
            The first Byte specifies if string is in unicode (0) or in UTF8 (1)
            The next Int32 specifies the length of the string
            Then there is the actual string value
            </summary>
            <param name="stream"></param>
            <returns></returns>
        </member>
        <member name="M:SilkPerformer.SPTcpClientTransportSink.WritePreambleAndVersion(System.IO.Stream)">
            <summary>
            Write the preamble and version: .NET10
            </summary>
            <param name="stream"></param>
        </member>
        <member name="M:SilkPerformer.SPTcpClientTransportSink.WriteString(System.String,System.IO.Stream)">
            <summary>
            Writes the string to the stream
            </summary>
            <param name="sValue"></param>
            <param name="stream"></param>
        </member>
        <member name="M:SilkPerformer.SPTcpClientTransportSink.WriteByte(System.Byte,System.IO.Stream)">
            <summary>
            Writes a byte to the stream
            </summary>
            <param name="bValue"></param>
            <param name="stream"></param>
        </member>
        <member name="M:SilkPerformer.SPTcpClientTransportSink.WriteUInt16(System.UInt16,System.IO.Stream)">
            <summary>
            Writes an UInt16 to the stream
            </summary>
            <param name="nValue"></param>
            <param name="stream"></param>
        </member>
        <member name="M:SilkPerformer.SPTcpClientTransportSink.WriteInt32(System.Int32,System.IO.Stream)">
            <summary>
            Writes an Int32 to the stream
            </summary>
            <param name="nValue"></param>
            <param name="stream"></param>
        </member>
        <member name="M:SilkPerformer.SPTcpClientTransportSink.ReadByte(System.IO.Stream)">
            <summary>
            Reads a byte from the stream
            </summary>
            <param name="stream"></param>
            <returns></returns>
        </member>
        <member name="M:SilkPerformer.SPTcpClientTransportSink.ReadInt32(System.IO.Stream)">
            <summary>
            Reads an Int32 from the stream
            </summary>
            <param name="stream"></param>
            <returns></returns>
        </member>
        <member name="M:SilkPerformer.SPTcpClientTransportSink.ReadUInt16(System.IO.Stream)">
            <summary>
            Reads an UInt16 from the stream
            </summary>
            <param name="stream"></param>
            <returns></returns>
        </member>
        <member name="M:SilkPerformer.SPTcpClientTransportSink.GetResponseStream(System.IO.Stream,System.Runtime.Remoting.Channels.ITransportHeaders@)">
            <summary>
            Reads from the response stream and returns the transport headers and the content stream
            </summary>
            <param name="respStream"></param>
            <param name="respHeaders"></param>
            <returns></returns>
        </member>
        <member name="M:SilkPerformer.SPTcpClientTransportSink.GetResponseHeaders(System.IO.Stream,System.Runtime.Remoting.Channels.ITransportHeaders@)">
            <summary>
            Reads the response headers from the stream and returns them in the respHeaders collection
            Returns the length of the content
            </summary>
            <param name="respStream"></param>
            <param name="respHeaders"></param>
            <returns></returns>
        </member>
        <member name="M:SilkPerformer.SPTcpClientTransportSink.ReadAndVerifyHeaderFormat(System.String,System.Byte,System.IO.Stream)">
            <summary>
            Reads and verifies the type of header
            </summary>
            <param name="sHeaderName"></param>
            <param name="excpFormat"></param>
            <param name="stream"></param>
        </member>
        <member name="P:SilkPerformer.SPTcpClientTransportSink.System#Runtime#Remoting#Channels#IClientChannelSink#NextChannelSink">
            <summary>
            As we are a transport sink - we dont have any next sinks
            </summary>
        </member>
        <member name="T:SilkPerformer.ThreadViolationException">
            <summary>
            This exception is thrown if a method is NOT called from the right thread.
            </summary>
        </member>
    </members>
</doc>

